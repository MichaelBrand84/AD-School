# Vorwort {.unnumbered}

Die vorliegende Arbeit entstand im Rahmen des [GymInf](https://www.unifr.ch/gyminf/de/) Programms an der [Universität Freiburg](https://www.unifr.ch/home/de/). Dieses Programm hat das Ziel, Lehrpersonen, die auf Sekundarstufe II an einem Schweizer Gymnasium unterrichten, die Erlangung der Lehrberechtigung für das Fach Informatik zu ermöglichen. Die Vorlesungen wurden von Dozierenden verschiedener Schweizer Universitäten gehalten. Eine selbständige Arbeit bildet den Abschluss des fachwissenschaftlichen Studiums dieses Lehrganges.

Das Thema der algorithmischen Differentiation wurde in den Vorlesungen *Einführung Machine Learning*, gelesen von Johanni Brea ([EPFL](https://people.epfl.ch/johanni.brea)), und *Modellierung und Simulation*, gelesen von Walter Gander ([ETHZ](https://people.inf.ethz.ch/gander/)) und Michael Multerer ([USI](https://search.usi.ch/en/people/339699228dd35e95e8bb3c002edca90f/multerer-michael)) angeschnitten. An diesem Thema reizte mich besonders die Querverbindung zum Fach Mathematik, welches ich hauptsächlich unterrichte. Die Tatsache, dass nun alle Schüler:innen die Grundlagen des Programmierens - in unserer Schule mit der Programmiersprache Python - erlernen, bietet für den Mathematikunterricht z.B. die Möglichkeit, ein Newtonverfahren als Anwendung der Differentialrechnung einzuführen. Methoden der algorithmischen Differentiation ermöglichen dabei nicht nur numerische Verfahren wie das Newtonverfahren, welche Ableitungen benötigen, sondern sind auch ein wichtiger Bestandteil in vielen Machine Learning Algorithmen, denen wir täglich begegnen und die für die meisten Leute wohl eine Black Box bilden. Dabei sind diese Ideen durchaus für Schüler:innen zugänglich und bieten wahlweise eine Ergänzung zum Mathematikunterricht oder eine Vertiefung im Informatikunterricht zum Thema künstliche Intelligenz. 

Da in vielen Schulen der Einsatz von Computern zum Alltag gehört, habe ich mich dazu entschieden, die Lerneinheit nicht als statisches pdf-Dokument sondern als Website zu gestalten, was auch die Möglichkeit bietet, Videos und interaktive GeoGebra Applikationen einzubinden. Die Webseite wurde mit [Quarto](https://quarto.org/) erstellt und auf GitHub unter

[https://michaelbrand84.github.io/AD-School/](https://michaelbrand84.github.io/AD-School/) 

veröffentlicht. Der Source Code zu den Programmen und die Quarto-Dateien selbst sind ebenfalls dort zu finden. 
Hinweise zu Fehlern oder Feedback im Allgemeinen nehme ich gerne unter michael.brand\@ems-schiers.ch entgegen


## Danksagung {.unnumbered}
Mein herzlicher Dank geht an Johanni Brea von der EPFL, der mir nicht nur das Thema der algorithmischen Differentiation ans Herz gelegt hat, sondern auch die vorliegende Arbeit betreut hat. Er hat sich Zeit für alle meine Fragen und Anliegen genommen und mir wertvolle Hinweise für die Umsetzung gegeben. Walter Gander von der ETHZ danke ich ganz herzlich, dass er uns in seiner Vorlesung einige Anwendungen der algorithmischen Differentiation, wie z.B. das Billardproblem auf einem runden Tisch gezeigt hat, welches ich auch in dieser Arbeit verwenden durfte. Er hat sich auch bereit erklärt, diese Arbeit als zweiter Gutachter zusammen mit Johanni Brea zu lesen und zu bewerten. 

Einen ersten Entwurf der Arbeit durfte ich meinem Kollegen Mario Feuerstein von der [EMS Schiers](https://ems-schiers.ch/) zum lesen geben, der mir wertvolle Anregungen zur Strukturierung des Skripts und zu einzelnen Beispielen gegeben hat. Das Logo ist das unserer Schule, das ich mit Zustimmung der Schulleitung verwenden durfte.


# Einleitung {.unnumbered}
Das Thema dieser Arbeit ist die algorithmische Differentiation (AD). Dabei betrachten wir Programme (bzw. Funktionen innerhalb von Programmen), die numerische Werte als Input erhalten und daraus einen numerischen Output berechnen. Solche Programme können als Funktionen im Sinne der Mathematik angesehen werden mit dem Unterschied, dass der Output nicht unbedingt in Form einer einzigen Formel berechnet wird, sondern häufig sukzessive in mehreren Schritten bestimmt wird. AD ist ein Sammelbegriff für Methoden, mit denen sich von solchen Funktionen Ableitungen berechnen lassen. Diese Methoden liefern exakte Werte für die Ableitung (nicht Näherungswerte), sind effizient berechenbar und arbeiten nicht mit symbolischen Ausdrücken wie es Computer Algebra Systeme tun. Stattdessen wird der Wert der Ableitung punktweise zusammen mit dem Funktionswert berechnet.

Ausserhalb der relativ kleinen AD Community war AD lange unbekannt oder wurde als irrelevant abgetan. So schreibt etwa Louis Rall in @Rall2006 (S. 12)

> It was discouraging throughout the 1970’s that the work done on AD by Moore, Wengert, and the then state of the art programs written by the MRC programming staff were ignored and even disparaged. Presentations at conferences were met with disinterest or disbelief. One reason advanced for this was the wide-spread conviction that if a function was represented by a formula, then a formula for its derivative was necessary before its derivative could be evaluated.

In der Machine Learning (ML) Community wurde AD (mehrere Male) wiederentdeckt und ist dort als backpropagation bekannt und weit verbreitet (@Baydin18, S. 14). Mittlerweile findet die Technik aber auch Anwendung in der Finanzmathematik (@Henrard2017ADi), der Physik, Chemie, Medizin oder Biologie. Die Website [www.autodiff.org](https://autodiff.org/?module=Applications) listet Artikel zum Thema sortiert nach Fachgebiet auf (@Bücker_hovland_2000). 

Einer der ersten Autoren, die das Thema AD für den gymnasialen Mathematik- bzw. Informatikunterricht aufbereitet hat, ist @Gander1992 (S. 245ff). Es war auch das erste veröffentliche Buch, welches mit LaTex geschrieben wurde. Leider ist es meines Wissens bislang auch das einzige Buch auf der Sekundarstufe II, welches eine Einführung für Schüler:innen in dieses Thema gibt. Natürlich gibt es die einschlägige Fachliteratur wie @Corliss2002ADo, @Griewank2008EDP und @Naumann2012TAo, welche sich an Fachleute oder Studenten richtet, die über die entsprechenden Kenntnisse in Mathematik und im Programmieren verfügen. Diese sind aber für den gymnasialen Unterricht schlecht geeignet. Über AD im Unterricht schreibt Louis Rall im oben zitierten Buch (S. 12)

> It is easy to prepare a teaching “module” for AD on an elementary level. The problem is to have it adopted as part of an increasingly crowded curriculum in beginning calculus. This means that teachers and writers of textbooks on calculus have to first grasp the idea and then realize it is significant. Thus, practitioners of AD will have to reach out to educators in a meaningful way. Otherwise, there will continue to be a refractory “formulas only” community in the computational sciences who could well benefit from AD.

Diese Arbeit versteht sich als kleiner Beitrag, AD bekannter zu machen und als gewinnbringende Ergänzung im Mathematik- oder Informatikunterricht zu thematisieren.

